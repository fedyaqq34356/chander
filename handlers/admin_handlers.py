from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states import AdminStates
from config import ADMIN_GROUP_ID, EXCHANGE_RATES, CURRENCIES
from utm_manager import utm_manager

router = Router()

def is_admin_group(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã"""
    return str(message.chat.id) == ADMIN_GROUP_ID

@router.message(Command("send"), F.chat.id.in_([int(ADMIN_GROUP_ID)] if ADMIN_GROUP_ID else []))
async def send_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /send –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin_group(message):
        return
    
    parts = message.text.split(' ', 2)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    try:
        user_id = int(parts[1])
        text = parts[2]
        
        await message.bot.send_message(user_id, text)
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@router.message(Command("demolink"), F.chat.id.in_([int(ADMIN_GROUP_ID)] if ADMIN_GROUP_ID else []))
async def generate_demo_link(message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-—Å—Å—ã–ª–∫—É"""
    if not is_admin_group(message):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
        bot_info = await message.bot.get_me()
        bot_username = bot_info.username
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UTM –∫–æ–¥ –¥–ª—è –¥–µ–º–æ
        utm_code = utm_manager.generate_utm_code("demo")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        demo_link = f"https://t.me/{bot_username}?start={utm_code}"
        
        await message.answer(
            f"üîó Demo —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:\n\n"
            f"`{demo_link}`\n\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞\n"
            f"üé≠ –¢–∏–ø: –î–ï–ú–û —Ä–µ–∂–∏–º\n"
            f"üîë UTM –∫–æ–¥: `{utm_code}`",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-—Å—Å—ã–ª–∫–∏: {e}")

@router.message(Command("reallink"), F.chat.id.in_([int(ADMIN_GROUP_ID)] if ADMIN_GROUP_ID else []))
async def generate_real_link(message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    if not is_admin_group(message):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
        bot_info = await message.bot.get_me()
        bot_username = bot_info.username
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UTM –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        utm_code = utm_manager.generate_utm_code("real")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        real_link = f"https://t.me/{bot_username}?start={utm_code}"
        
        await message.answer(
            f"üîó Real —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:\n\n"
            f"`{real_link}`\n\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞\n"
            f"üí∞ –¢–∏–ø: –†–ï–ê–õ–¨–ù–´–ô —Ä–µ–∂–∏–º\n"
            f"üîë UTM –∫–æ–¥: `{utm_code}`",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")

@router.message(Command("links"), F.chat.id.in_([int(ADMIN_GROUP_ID)] if ADMIN_GROUP_ID else []))
async def show_active_links(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ UTM —Å—Å—ã–ª–∫–∏"""
    if not is_admin_group(message):
        return
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
    utm_manager.cleanup_expired_codes()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–∞—Ö
    info = utm_manager.get_active_codes_info()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å Demo —Å—Å—ã–ª–∫—É", callback_data="generate_demo"),
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å Real —Å—Å—ã–ª–∫—É", callback_data="generate_real")
        ]
    ])
    
    await message.answer(f"üìã {info}", reply_markup=keyboard)

@router.callback_query(F.data.in_(["generate_demo", "generate_real"]))
async def process_link_generation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫"""
    if not is_admin_group(callback.message):
        await callback.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø–µ")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
        bot_info = await callback.message.bot.get_me()
        bot_username = bot_info.username
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
        link_type = "demo" if callback.data == "generate_demo" else "real"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UTM –∫–æ–¥
        utm_code = utm_manager.generate_utm_code(link_type)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        link = f"https://t.me/{bot_username}?start={utm_code}"
        link_type_display = "–î–ï–ú–û" if link_type == "demo" else "–†–ï–ê–õ–¨–ù–´–ô"
        
        await callback.message.answer(
            f"üîó {link_type_display} —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:\n\n"
            f"`{link}`\n\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞\n"
            f"{'üé≠' if link_type == 'demo' else 'üí∞'} –¢–∏–ø: {link_type_display} —Ä–µ–∂–∏–º\n"
            f"üîë UTM –∫–æ–¥: `{utm_code}`",
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await callback.answer()

@router.message(Command("help"), F.chat.id.in_([int(ADMIN_GROUP_ID)] if ADMIN_GROUP_ID else []))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not is_admin_group(message):
        return
    
    help_text = """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:

/send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/kyrs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
/kyrs <–≤–∞–ª—é—Ç–∞> <–∫—É—Ä—Å> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã

üîó UTM —Å—Å—ã–ª–∫–∏:
/links - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏

/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: """ + ", ".join(CURRENCIES)
    
    await message.answer(help_text)
