from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states import ExchangeStates
from keyboards import (
    get_main_keyboard, 
    get_currency_keyboard, 
    get_confirmation_keyboard,
    get_cancel_keyboard
)
from utils import (
    calculate_exchange_amount,
    generate_order_id,
    generate_secret,
    format_order_message,
    format_admin_message,
    get_new_order_message
)
from config import CURRENCIES, ADMIN_GROUP_ID

router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    text = """–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω
–ù–∞–∂–∏–º–∞—è –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å —Ä–∞–∑–¥–µ–ª–æ–º /terms"""
    
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(Command("terms"))
async def terms_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terms"""
    terms_text = """–ü—Ä–∞–≤–∏–ª–∞ –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:
1. –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω: –°–æ–∑–¥–∞–≤–∞—è –∑–∞—è–≤–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±–º–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–ª–∞–¥–µ–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏—è—Ö.
2. –°—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 30 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç–∏. –ó–∞–¥–µ—Ä–∂–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã –∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω–∞.
3. –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: –§–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—é.
4. –ö–æ–º–∏—Å—Å–∏–∏: –í—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏–∑ —Å—É–º–º—ã –æ–±–º–µ–Ω–∞.
5. –û—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–µ—Å–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –û—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ —Å—Ä–µ–¥—Å—Ç–≤.
6. –ê–Ω—Ç–∏—Ñ—Ä–æ–¥-–ø–æ–ª–∏—Ç–∏–∫–∞: –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã.
7. –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏: –ó–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç.
8. –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–°–æ–∑–¥–∞–≤–∞—è –∑–∞—è–≤–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏."""
    
    await message.answer(terms_text)

@router.message(F.text == "–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω")
async def start_exchange(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å", 
                        reply_markup=get_currency_keyboard())
    await state.set_state(ExchangeStates.choosing_sell_currency)

@router.message(ExchangeStates.choosing_sell_currency, F.text.in_(CURRENCIES))
async def choose_sell_currency(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    await state.update_data(sell_currency=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å", 
                        reply_markup=get_cancel_keyboard())
    await state.set_state(ExchangeStates.entering_amount)

@router.message(ExchangeStates.entering_amount)
async def enter_amount(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Å—É–º–º—ã –æ–±–º–µ–Ω–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_operation(message, state)
        return
    
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        
        await state.update_data(sell_amount=amount)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å", 
                            reply_markup=get_currency_keyboard())
        await state.set_state(ExchangeStates.choosing_buy_currency)
        
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(ExchangeStates.choosing_buy_currency, F.text.in_(CURRENCIES))
async def choose_buy_currency(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    data = await state.get_data()
    sell_currency = data['sell_currency']
    sell_amount = data['sell_amount']
    buy_currency = message.text
    
    if sell_currency == buy_currency:
        await message.answer("–ù–µ–ª—å–∑—è –æ–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É —Å–∞–º—É –Ω–∞ —Å–µ–±—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.")
        return
    
    buy_amount = calculate_exchange_amount(sell_currency, buy_currency, sell_amount)
    
    await state.update_data(
        buy_currency=buy_currency,
        buy_amount=buy_amount
    )
    
    await message.answer("üí±")
    
    confirmation_text = f"""–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:
–ü—Ä–æ–¥–∞–µ—Ç–µ: {sell_amount} {sell_currency}
–ü–æ–∫—É–ø–∞–µ—Ç–µ: {buy_amount:.4f} {buy_currency}"""
    
    await message.answer(confirmation_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(ExchangeStates.confirming_order)

@router.message(ExchangeStates.confirming_order, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_order(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    data = await state.get_data()
    
    order_id = generate_order_id()
    secret = generate_secret()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = format_order_message(
        data['sell_currency'],
        data['sell_amount'],
        data['buy_currency'],
        data['buy_amount'],
        order_id,
        secret
    )
    
    await message.answer(user_message, parse_mode="Markdown")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    new_order_message = get_new_order_message()
    await message.answer(new_order_message, reply_markup=get_main_keyboard())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
    if ADMIN_GROUP_ID:
        admin_message = format_admin_message(
            message.from_user.username or "unknown",
            message.from_user.id,
            data['sell_currency'],
            data['sell_amount'],
            data['buy_currency'],
            data['buy_amount'],
            order_id,
            secret
        )
        
        try:
            await message.bot.send_message(ADMIN_GROUP_ID, admin_message, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É: {e}")
    
    await state.clear()

@router.message(ExchangeStates.confirming_order, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_order(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    await cancel_operation(message, state)

async def cancel_operation(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_main_keyboard())
    await state.clear()

@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_handler(message: Message, state: FSMContext):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    await cancel_operation(message, state)
